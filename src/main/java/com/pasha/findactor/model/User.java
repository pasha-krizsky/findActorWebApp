package com.pasha.findactor.model;

import com.pasha.findactor.model.constants.AppUserUserProfileFields;
import com.pasha.findactor.model.constants.Sequences;
import com.pasha.findactor.model.constants.Tables;
import com.pasha.findactor.model.constants.UserFields;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import org.hibernate.validator.constraints.NotEmpty;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import java.io.Serializable;
import java.util.HashSet;
import java.util.Set;

/**
 * This class represents {@link Tables#APP_USER} table in database
 * and contains information about all users registered in the system.
 *
 * @author Pavel.Krizskiy
 * @see UserProfile
 * @since 1.0.0
 */
@EqualsAndHashCode
@ToString(exclude = UserFields.PASSWORD)
@Getter
@Setter
@Entity
@Table(name = Tables.APP_USER)
public final class User implements Serializable {

    private static final String GENERATOR_NAME = "user_seq";
    private static final int ALLOCATION_SIZE = 1;

    /**
     * Unique id of the user, generated by sequence in database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = GENERATOR_NAME)
    @SequenceGenerator(name = GENERATOR_NAME, sequenceName = Sequences.APP_USER_SEQ, allocationSize = ALLOCATION_SIZE)
    private Integer id;

    @NotEmpty
    @Column(name = UserFields.SSO_ID, unique = true, nullable = false)
    private String ssoId;

    @NotEmpty
    @Column(name = UserFields.PASSWORD, nullable = false)
    private String password;

    @NotEmpty
    @Column(name = UserFields.FIRST_NAME, nullable = false)
    private String firstName;

    @NotEmpty
    @Column(name = UserFields.LAST_NAME, nullable = false)
    private String lastName;

    @NotEmpty
    @Column(name = UserFields.EMAIL, nullable = false)
    private String email;

    @ManyToMany(fetch = FetchType.LAZY)
    @JoinTable(name = Tables.APP_USER_USER_PROFILE,
            joinColumns = {@JoinColumn(name = AppUserUserProfileFields.USER_ID)},
            inverseJoinColumns = {@JoinColumn(name = AppUserUserProfileFields.USER_PROFILE_ID)})
    private Set<UserProfile> userProfiles = new HashSet<>();
}
